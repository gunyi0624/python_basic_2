{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a2ae21d0-c4b3-450f-b346-7a8a19062968",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "생성된 학생 정보:\n",
      "이름: AJ, 나이: 18, 성적: 75\n",
      "이름: RF, 나이: 21, 성적: 9\n",
      "이름: SV, 나이: 21, 성적: 10\n",
      "이름: OU, 나이: 18, 성적: 72\n",
      "이름: FI, 나이: 19, 성적: 80\n",
      "이름: TE, 나이: 19, 성적: 76\n",
      "이름: HP, 나이: 20, 성적: 46\n",
      "이름: AJ, 나이: 19, 성적: 54\n",
      "이름: VO, 나이: 19, 성적: 49\n",
      "이름: TB, 나이: 21, 성적: 26\n",
      "이름: SO, 나이: 22, 성적: 73\n",
      "이름: HV, 나이: 21, 성적: 99\n",
      "이름: QA, 나이: 22, 성적: 18\n",
      "이름: HW, 나이: 21, 성적: 36\n",
      "이름: PK, 나이: 20, 성적: 98\n",
      "이름: FB, 나이: 19, 성적: 61\n",
      "이름: WD, 나이: 18, 성적: 52\n",
      "이름: HQ, 나이: 20, 성적: 84\n",
      "이름: OQ, 나이: 19, 성적: 43\n",
      "이름: YC, 나이: 20, 성적: 47\n",
      "이름: LN, 나이: 22, 성적: 41\n",
      "이름: XW, 나이: 18, 성적: 48\n",
      "이름: TL, 나이: 21, 성적: 81\n",
      "이름: OO, 나이: 21, 성적: 60\n",
      "이름: VD, 나이: 21, 성적: 46\n",
      "이름: PR, 나이: 21, 성적: 36\n",
      "이름: TL, 나이: 18, 성적: 32\n",
      "이름: FF, 나이: 20, 성적: 86\n",
      "이름: ZK, 나이: 19, 성적: 5\n",
      "이름: OZ, 나이: 18, 성적: 41\n",
      "\n",
      "메뉴:\n",
      "1. 이름을 기준으로 정렬\n",
      "2. 나이를 기준으로 정렬\n",
      "3. 성적을 기준으로 정렬\n",
      "4. 프로그램 종료\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "정렬 기준을 선택하세요 (1, 2, 3, 4):  4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "프로그램을 종료합니다.\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "\n",
    "# 데이터 생성\n",
    "def generate_students():\n",
    "    students = []\n",
    "    for _ in range(30):\n",
    "        name = ''.join(random.choices(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", k=2))\n",
    "        age = random.randint(18, 22)\n",
    "        score = random.randint(0, 100)\n",
    "        students.append({\"이름\": name, \"나이\": age, \"성적\": score})\n",
    "    return students\n",
    "\n",
    "\n",
    "# 선택 정렬\n",
    "def selection_sort(A, key, reverse=False):\n",
    "    n = len(A)\n",
    "    for i in range(n - 1):\n",
    "        least = i\n",
    "        for j in range(i + 1, n):\n",
    "            if (A[j][key] > A[least][key]) if reverse else (A[j][key] < A[least][key]):\n",
    "                least = j\n",
    "        A[i], A[least] = A[least], A[i]\n",
    "        print(f\"  Step {i+1:2d} =\", [{f'{x[\"이름\"]}: {x[key]}' for x in A}])\n",
    "    return A\n",
    "\n",
    "\n",
    "# 삽입 정렬\n",
    "def insertion_sort(A, key, reverse=False):\n",
    "    n = len(A)\n",
    "    for i in range(1, n):\n",
    "        key_item = A[i]\n",
    "        j = i - 1\n",
    "        while j >= 0 and ((A[j][key] < key_item[key]) if reverse else (A[j][key] > key_item[key])):\n",
    "            A[j + 1] = A[j]\n",
    "            j -= 1\n",
    "        A[j + 1] = key_item\n",
    "        print(f\"  Step {i+1:2d} =\", [{f'{x[\"이름\"]}: {x[key]}' for x in A}])\n",
    "    return A\n",
    "\n",
    "\n",
    "# 퀵 정렬\n",
    "def partition(A, left, right, key, reverse=False):\n",
    "    pivot = A[right]\n",
    "    i = left - 1\n",
    "    for j in range(left, right):\n",
    "        if (A[j][key] > pivot[key]) if reverse else (A[j][key] < pivot[key]):\n",
    "            i += 1\n",
    "            A[i], A[j] = A[j], A[i]\n",
    "    A[i + 1], A[right] = A[right], A[i + 1]\n",
    "    return i + 1\n",
    "\n",
    "\n",
    "def quick_sort(A, left, right, key, reverse=False):\n",
    "    if left < right:\n",
    "        q = partition(A, left, right, key, reverse)\n",
    "        print(f\"  Partition at index {q}: \", [{f'{x[\"이름\"]}: {x[key]}' for x in A}])\n",
    "        quick_sort(A, left, q - 1, key, reverse)\n",
    "        quick_sort(A, q + 1, right, key, reverse)\n",
    "    return A\n",
    "\n",
    "\n",
    "# 기수 정렬\n",
    "def counting_sort(data, key, reverse=False):\n",
    "    max_value = max(student[key] for student in data)\n",
    "    count = [0] * (max_value + 1)\n",
    "    output = [None] * len(data)\n",
    "\n",
    "    for student in data:\n",
    "        count[student[key]] += 1\n",
    "\n",
    "    if reverse:\n",
    "        for i in range(len(count) - 2, -1, -1):\n",
    "            count[i] += count[i + 1]\n",
    "    else:\n",
    "        for i in range(1, len(count)):\n",
    "            count[i] += count[i - 1]\n",
    "\n",
    "    for student in reversed(data):\n",
    "        idx = count[student[key]] - 1\n",
    "        output[idx] = student\n",
    "        count[student[key]] -= 1\n",
    "\n",
    "    return output\n",
    "\n",
    "\n",
    "def radix_sort(data, key, reverse=False):\n",
    "    max_value = max(student[key] for student in data)\n",
    "    exp = 1\n",
    "    while max_value // exp > 0:\n",
    "        buckets = counting_sort(data, key=lambda x: (x[key] // exp) % 10, reverse=reverse)\n",
    "        data = [student for student in buckets]\n",
    "        exp *= 10\n",
    "    return data\n",
    "\n",
    "\n",
    "# 정렬 선택 및 실행\n",
    "def sort_students(students, key, algorithm, reverse=False):\n",
    "    if algorithm == \"선택 정렬\":\n",
    "        return selection_sort(students, key, reverse)\n",
    "    elif algorithm == \"삽입 정렬\":\n",
    "        return insertion_sort(students, key, reverse)\n",
    "    elif algorithm == \"퀵 정렬\":\n",
    "        return quick_sort(students, 0, len(students) - 1, key, reverse)\n",
    "    elif algorithm == \"기수 정렬\" and key == \"성적\":\n",
    "        return radix_sort(students, key, reverse)\n",
    "    else:\n",
    "        print(\"잘못된 정렬 알고리즘입니다.\")\n",
    "        return students\n",
    "\n",
    "\n",
    "# 사용자 인터페이스\n",
    "def main():\n",
    "    students = generate_students()\n",
    "    print(\"생성된 학생 정보:\")\n",
    "    for student in students:\n",
    "        print(f\"이름: {student['이름']}, 나이: {student['나이']}, 성적: {student['성적']}\")\n",
    "\n",
    "    while True:\n",
    "        print(\"\\n메뉴:\")\n",
    "        print(\"1. 이름을 기준으로 정렬\")\n",
    "        print(\"2. 나이를 기준으로 정렬\")\n",
    "        print(\"3. 성적을 기준으로 정렬\")\n",
    "        print(\"4. 프로그램 종료\")\n",
    "\n",
    "        choice = input(\"정렬 기준을 선택하세요 (1, 2, 3, 4): \")\n",
    "        if choice == \"4\":\n",
    "            print(\"프로그램을 종료합니다.\")\n",
    "            break\n",
    "\n",
    "        key = {\"1\": \"이름\", \"2\": \"나이\", \"3\": \"성적\"}.get(choice)\n",
    "        if not key:\n",
    "            print(\"잘못된 선택입니다. 다시 시도하세요.\")\n",
    "            continue\n",
    "\n",
    "        while True:\n",
    "            algorithm = input(\"사용할 정렬 알고리즘을 선택하세요 (선택 정렬, 삽입 정렬, 퀵 정렬, 기수 정렬): \")\n",
    "            if algorithm == \"기수 정렬\" and key != \"성적\":\n",
    "                print(\"기수 정렬은 성적 기준으로만 사용할 수 있습니다. 다시 선택하세요.\")\n",
    "            else:\n",
    "                break\n",
    "\n",
    "        reverse = input(\"오름차순(0) 또는 내림차순(1)을 선택하세요: \") == \"1\"\n",
    "\n",
    "        sorted_students = sort_students(students, key, algorithm, reverse)\n",
    "        print(\"\\n정렬된 학생 정보:\")\n",
    "        for student in sorted_students:\n",
    "            print(f\"이름: {student['이름']}, 나이: {student['나이']}, 성적: {student['성적']}\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81d01e3f-de58-421a-bdcf-0bdf7d06a046",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
